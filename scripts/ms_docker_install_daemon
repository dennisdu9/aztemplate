#!/bin/bash
# Install or Upgrade MediaSuite docker

[ -f /.dockerenv ] && echo "Cannot exec in docker!" && exit 1

InstallDir="/var/dockerinstall"
[ -d $InstallDir/log ] || mkdir -p $InstallDir/log
[ -d $InstallDir/bin ] || mkdir -p $InstallDir/bin

INSTALL_LOG=/var/dockerinstall/log/install_package.log
touch $INSTALL_LOG && LOGFILE=$INSTALL_LOG || LOGFILE=/dev/stdout

DAEMON_SCRIPT_SELF=$(dirname $0)/$(basename $0)
[ -f $DAEMON_SCRIPT_SELF ] || DAEMON_SCRIPT_SELF=`which $(basename $0)`
[ -f $DAEMON_SCRIPT_SELF ] || clear_env "cannot get $(basename $0) path"
DEPLOY_SCRIPT=$(dirname $DAEMON_SCRIPT_SELF)/ms_docker_deploy
[ -f $DEPLOY_SCRIPT ] || clear_env "cannot find ms_docker_deploy file"

(
    echo -e "\n================================================================================"
    echo -e "`date +"%Y-%m-%d %T"` start script: $0 $@\n"

    ARGS=`getopt -a -l netadmin:,confighost -n "$0" -- $0 $@`
    if [ $? != 0 ]; then
        echo -e "Usage:\n$(basename $0) [--netadmin=host|dhost|macvlan] [--confighost]"
        exit 1
    fi
    eval set -- "${ARGS}"
    while true
    do
        case "$1" in
            --netadmin)
                NETWORK_ADMIN=$2
                shift 2
                ;;
            --confighost)
                ONLY_CONFIG=true
                shift
                ;;
            --)
                shift
                break
                ;;
        esac
    done

    HostConfig()
    {
        NEED_REBOOT=false

        # Change kernel boot parameter for "fs=current" and "eth0"
	NEWKERNEL=$(find /boot -name "vmlinuz*.`arch`.fs=current")
        if [ -z "$NEWKERNEL" ]; then
	    KERNEL_FILE=$(find /boot -name "vmlinuz*.`arch`")
	    if [ -n "$KERNEL_FILE" ]; then
		cp -f $KERNEL_FILE ${KERNEL_FILE}.fs=current
		KERNEL=`echo $KERNEL_FILE|grep -o "vmlinuz.*"`
		for BOOT_CFG in `find /boot -name "grub.cfg*"`; do
		    [ "${BOOT_CFG##*.}" == "tar" ] && tar xvf $BOOT_CFG -C $(dirname $BOOT_CFG)
		    GRUBCFG=$(dirname $BOOT_CFG)/grub.cfg
		    [ ! -f "$GRUBCFG" ] && continue
                    if ! grep "${KERNEL}.fs=current" $GRUBCFG; then
			[ ! -f ${GRUBCFG}.orig ] && cp $GRUBCFG ${GRUBCFG}.orig
			sed -i "s/$KERNEL /${KERNEL}.fs=current net.ifnames=0 /g" $GRUBCFG
			NEED_REBOOT=true
                    fi
		done
	    fi
        fi

        # Configure network interface
        if ip link show|grep " eth0:"; then
            which nmcli && (nmcli c s -active|grep "^eth0 " || nmcli c up eth0)
        fi

	# try to mount alone partition for docker
	OSDISK=`lsblk -l | awk '{if ($7=="/") {len=length($1);print substr($1,0,len-1)}}'`
	NEXTPART=`lsblk -l |grep "${OSDISK}.*part"|tail -n 1|awk '{len=length($1);print substr($1,len,len)+1}'`
	DISKSIZE=`lsblk -lb|grep "${OSDISK}.*disk"|awk 'BEGIN {sum=0}{sum+=$4} END {print sum}'`
	PARTSIZE=`lsblk -lb|grep "${OSDISK}.*part"|awk 'BEGIN {sum=0}{sum+=$4} END {print sum}'`
	let FREESIZE=($DISKSIZE-$PARTSIZE)/1024/1024/1024
	if [[ $FREESIZE -ge 20 && $NEXTPART -eq 3 ]]; then
	    fdisk /dev/sda <<EOF
n
p
3


w
EOF
	    partprobe && \
		echo "y" | mkfs.xfs /dev/sda3 && \
		echo "/dev/sda3    /var/lib/docker    xfs    defaults    0 0"  >> /etc/fstab && \
		mkdir -p /var/lib/docker && \
		mount /dev/sda3 /var/lib/docker
	fi

        # check/install docker
        if ! which docker; then
            if which yum; then
		which yum-config-manager || yum -y install yum-utils
		yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
		RANCHER_SUPPORT_VER="-18.09.9" #https://rancher.com/docs/rancher/v1.6/en/hosts/#supported-docker-versions
		yum install -y docker-ce$RANCHER_SUPPORT_VER docker-ce-cli$RANCHER_SUPPORT_VER
	    elif which apt-get; then
		apt-get install -y apt-transport-https ca-certificates curl software-properties-common
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
		add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		apt-get update
		RANCHER_SUPPORT_VER="=5:18.09.9~3-0~ubuntu-bionic"
		apt-get install -y docker-ce$RANCHER_SUPPORT_VER docker-ce-cli$RANCHER_SUPPORT_VER
	    fi
        fi
        which systemctl && systemctl enable docker && systemctl start docker

        # set MediaSuite daemon
        if which systemctl; then
            if [ ! -f /etc/systemd/system/ms-docker.service ]; then
                cat > /etc/systemd/system/ms-docker.service <<\EOF
[Unit]
Description=MediaSuite install service
ConditionFileIsExecutable=/var/dockerinstall/bin/ms_docker_install_daemon
After=docker.service

[Service]
Type=simple
ExecStart=/var/dockerinstall/bin/ms_docker_install_daemon
TimeoutSec=0
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
                [ -n "$NETWORK_ADMIN" ] && \
                    sed -i "s/\(^Exec.*$\)/\1 --netadmin=$NETWORK_ADMIN/g" /etc/systemd/system/ms-docker.service 
                systemctl enable ms-docker.service
                [ "$ONLY_CONFIG" != "true" ] && systemctl restart ms-docker.service
            fi
        fi

	# don't mount /dev/sdb on azure cloud
	WACONFS=("/usr/share/oem/waagent.conf" "/etc/waagent.conf")
	for CONF in ${WACONFS[@]}; do 
	    if [ -f $CONF ]; then
		grep "Provisioning.Enabled=y" $CONF \
		    && grep "Provisioning.UseCloudInit=n" $CONF \
		    && sed -i "s/ResourceDisk.Format=y/ResourceDisk.Format=n/g" $CONF
		grep "Provisioning.Enabled=n" $CONF \
		    && grep "Provisioning.UseCloudInit=y" $CONF \
		    && sed '/azure_resource-part1/d' /etc/fstab
		MOUNTDIR=`df|grep /dev/sdb1|awk '{print $6}'`
		if [ -n "$MOUNTDIR" ]; then
		    umount $MOUNTDIR
		    fdisk -l |grep /dev/sdb1 && fdisk /dev/sdb <<EOF
d
w
EOF
	 	    echo "y" | mkfs.ext4 /dev/sdb
		fi
	    fi
	done
	
        # Host ssh use port 8822, MediaSuite ssh use port 22
        SshPort=8822
        SshConfig=/etc/ssh/sshd_config
        if [[ -f $SshConfig &&  ! `grep "^Port $SshPort" $SshConfig` ]]; then
            cp -f $SshConfig ${SshConfig}.org
	    if grep "^#\?Port[[:blank:]]\+[0-9]\+" $SshConfig; then
		sed -i "s/^#\?\(Port\)[[:space:]]\+[0-9]\+$/\1 $SshPort/g" ${SshConfig}
	    else
		sed "$ a Port $SshPort" ${SshConfig}.org > $SshConfig
	    fi
            which semanage || (which yum && yum provides -y semanage && yum install -y policycoreutils-python)
            which semanage && semanage port -a -t ssh_port_t -p tcp $SshPort
            which systemctl && systemctl enable sshd
        fi
        [ "$ONLY_CONFIG" != "true" ] && which systemctl && systemctl restart sshd
        [ ! -f /root/.ssh/id_rsa.pub ] && ssh-keygen -f /root/.ssh/id_rsa -N ''
        [ "$(readlink /root/.ssh/authorized_keys)" != "/root/.ssh/id_rsa.pub" ] \
            && rm -f /root/.ssh/authorized_keys \
            && ln -sf /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys

        if [ "$NEED_REBOOT" == "true" ]; then
            echo "Warnning: Host configure have changed, Please reboot host then continue..."
        fi
    }
    HostConfig
    [ "$ONLY_CONFIG" == "true" ] && exit 0

    ShowIP()
    {
        ETH0IP=`ip addr|grep eth0|grep inet|sed 's/.*inet \([^/]*\)\/.*/\1/g'`
        ETH1IP=`ip addr|grep eth1|grep inet|sed 's/.*inet \([^/]*\)\/.*/\1/g'`
        echo -e "\nHARMAN MediaSuite Server on $ETH0IP $ETH1IP\n" 1>&2
    }
    ShowIP

    TryFirstInstall()
    {
        # wait dockerd starting
	docker ps &>/dev/null
        while true; do
            pgrep dockerd && break
            sleep 1;
        done

        SYSTEM_DISK="$(blkid -o device -l -t "LABEL=mediasuite-system" || :)"
        if [ -z "$SYSTEM_DISK" ]; then
            TryInstallMediaSuite
            return 1
        fi

        [ -n "`docker ps -a --format "{{.Image}}"|grep "mediasuite-[^-]*-[^-.]*"`" ] && return 0

        MOUNT_POINT=${SYSTEM_DISK/dev/mnt}
        mount "$SYSTEM_DISK" "$MOUNT_POINT" &>/dev/null || return 1

        if [ -f $MOUNT_POINT/image/nfs-server.tar ]; then
            [ "$NETWORK_ADMIN" == "macvlan" ] && docker network create -d macvlan -o parent=eth0 macvlan 2>/dev/null
            R=`openssl rand -hex 6` && MAC="66:${R:2:2}:${R:4:2}:${R:4:2}:${R:8:2}:${R:10:2}"
            [ "$NETWORK_ADMIN" == "macvlan" ] && NET_OPT="--net=macvlan --mac-address=$MAC -e IP=dhcp" || NET_OPT="--net=host"
            docker rm -f nfs-server &>/dev/null
            docker image rm -f nfs-server &>/dev/null
            docker load --input=$MOUNT_POINT/image/nfs-server.tar
            docker run -d --restart=unless-stopped $NET_OPT --name nfs-server --privileged -v mediasuite-nfs:/nfs -e SHARED_DIRECTORY=/nfs nfs-server
        fi

        IMAGE_FILE=`ls -t1 $MOUNT_POINT/image/MediaSuite-*.iso 2>/dev/null|head -1`
        if [ -f "$IMAGE_FILE" ]; then
	    export PORTABLE_VERSION=true
            TryInstallMediaSuite $IMAGE_FILE
        fi

        umount "$MOUNT_POINT" &>/dev/null
    }

    TryInstallMediaSuite()
    {
        InstallFile=$1
        [ -n "$2" ] && OrigDocker=`docker inspect --format='{{.Name}}' "$2"|cut -c 2-`

        echo -e "\n`date +"%Y-%m-%d %T"` Try to install $InstallFile base $OrigDocker..."

        if [ -f "$InstallFile" ]; then
            ValidFile=true
        else
            InstallFilePattern="^MediaSuite-[^-]*-[^-.]*.*\.(iso|pkg|bin)"
            for InstallFile in `ls $InstallDir/MediaSuite* 2>/dev/null`; do
                [[ `basename $InstallFile` =~ $InstallFilePattern ]] && ValidFile=true && break
            done
        fi
        [ -z "$ValidFile" ] && echo -e "Install MediaSuite failure: No valid MediaSuite install file\n" &&  return 1

        while true; do
            NewName=mediasuite-`openssl rand -hex 2`
            docker inspect --format='NewDocker={{.Name}}' $NewName &>/dev/null || break
        done
        NewDocker=$NewName

        if [ -n "$OrigDocker" ]; then
            docker wait $OrigDocker
            docker stop $OrigDocker
            docker rename $OrigDocker $NewName
            NewDocker=$OrigDocker
            OrigDocker=$NewName
        fi

        if [ -n "$OrigDocker" ]; then
            MAC=`docker inspect --format='{{.Config.MacAddress}}' $OrigDocker`
            [ -n "$MAC" ] && OPT+=" --mac=$MAC"
            Network=`docker inspect --format='{{range .Config.Env}}{{.}}{{println}}{{end}}' $OrigDocker|grep NETWORK_ADMIN`
            [ -n "$Network" ] && OPT+=" --netadmin=`echo $Network | awk -F '=' '{print $2}'`"
            DataDir="/data"
            Volume=`docker inspect --format='{{range .HostConfig.Binds}}{{.}}{{println}}{{end}}' $OrigDocker|grep $DataDir|awk -F ':' '{print $1}'`
            [ -n "$Volume" ] && OPT+=" --datavolume=$Volume"
        else
            [ -n "$NETWORK_ADMIN" ] && OPT+=" --netadmin=$NETWORK_ADMIN"
        fi

        echo `basename $DEPLOY_SCRIPT` linux $InstallFile --name=$NewDocker $OPT --dontrun
        $DEPLOY_SCRIPT linux $InstallFile --name=$NewDocker $OPT --dontrun
        rm -f $InstallFile 2>/dev/null
        [[ -n "$OrigDocker" && "$(dirname `dirname $InstallFile`)" == "$InstallDir" ]] && rm -rf `dirname $InstallFile` 2>/dev/null

        if docker inspect --format='NewDocker={{.Name}}' $NewDocker; then
            if [ -n "$OrigDocker" ]; then
                OrigImage=`docker inspect --format='{{.Config.Image}}' $OrigDocker`
                docker rm -f $OrigDocker
                docker image rm $OrigImage
            fi
            docker start $NewDocker
            NewImage=`docker inspect --format='{{.Config.Image}}' $NewDocker`
            echo -e "`date +"%Y-%m-%d %T"` Install MediaSuite success: start $NewDocker($OrigImage=>$NewImage)\n" && return 0
        else
            if [ -n "$OrigDocker" ]; then
                docker rename $OrigDocker $NewDocker
                OrigDocker=$NewName
                OrigImage=`docker inspect --format='{{.Config.Image}}' $OrigDocker`
                docker start $OrigDocker
            fi
            echo -e "`date +"%Y-%m-%d %T"` Install MediaSuite fail: restart $OrigDocker($OrigImage)\n" && return 1
        fi
    }


    # For first install new MediaSuite
    TryFirstInstall

    # For upgrade MediaSuite from existed docker
    while true; do
        InstallFlag=`ls -t1 $InstallDir/InstallFlag*.bin 2>/dev/null|head -1`
        if [ -z "$InstallFlag" ]; then
            sleep 2
        else
            OrigDocker=`echo $InstallFlag | awk -F '+' '{print $2}'`
            LogFile=`echo $InstallFlag | awk -F '+' '{print $3}'`
            InstallFile=`echo $InstallFlag | awk -F '+' '{print $4}'`
            rm -f $InstallFlag
            if [ -f $InstallDir/$OrigDocker/$InstallFile ]; then
                echo -e "\n`date +"%Y-%m-%d %T"` Try to install $InstallFile base `docker inspect --format='{{.Name}}' "$OrigDocker" 2>/dev/null`..."
                TryInstallMediaSuite $InstallDir/$OrigDocker/$InstallFile $OrigDocker >> $InstallDir/log/$LogFile.log &
            fi
        fi
    done;
) >> $LOGFILE
