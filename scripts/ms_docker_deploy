#!/bin/bash

[ -f /.dockerenv ] && echo "Cannot exec in docker!" && exit 1

show_usage()
{
    echo "Usage:"
    OPT="[--name=DOCKERNAME] [--netadmin=host|dhost|bridge|dbridge|macvlan] [--mac=xx:xx:xx:xx:xx:xx] [--datavolume=VOLUME] [--dontrun]"
    echo -e "$(basename $0) linux <*.[iso|pkg|bin]|image> \n\t $OPT"
    echo -e "$(basename $0) azure <*.[iso|pkg|bin]|image> \n\t[--vmname=NAME] [--azimage=centos|ubuntu] [--azlocation=LOCAL] [--azdnsname=NAME] \n\t $OPT"
    echo -e "$(basename $0) hyper <*.[iso|pkg|bin]|image> \n\t[--vmname=NAME] [--cpu=NUM] [--mem=SIZE(G)] [--disk=SIZE(G)] \n\t $OPT"
    echo -e "$(basename $0) vbox <*.[iso|pkg|bin]|image> \n\t[--vmname=NAME] [--cpu=NUM] [--mem=SIZE(G)] [-disk=SIZE(G)] \n\t $OPT"
    echo -e 'Sample: \nms_docker_deploy azure
        MediaSuite-x.x.x-xxx-xxxx-xx-xx-xx-xx.iso
        --vmname <VM NAME>
        --azgroup mediasuite
        --azuresize Standard_A8_v2 #https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs
        --azosdiskgb 100
        --azdatadiskgb 100
        --azusessddisk
        --azsubnet <vnet/subnet>
	--azlocation eastus #https://azure.microsoft.com/en-us/global-infrastructure/locations
	--azdnsname <none>'
    exit 1
}

DEPLOY_SCRIPT_SELF=$(dirname $0)/$(basename $0)
[ -f $DEPLOY_SCRIPT_SELF ] || DEPLOY_SCRIPT_SELF=`which $(basename $0)`
[ -f $DEPLOY_SCRIPT_SELF ] || clear_env "cannot get $(basename $0) path"
DAEMON_SCRIPT=$(dirname $DEPLOY_SCRIPT_SELF)/ms_docker_install_daemon
[ -f $DAEMON_SCRIPT ] || clear_env "cannot find ms_docker_install_daemon file"
     
DOCKER_IP="127.0.0.1"
ARGS=`getopt -a -l vmname:,azgroup:,azuresize:,azimage:,cpu:,azusessddisk,azdnsname:,azsubnet:,azlocation:,azosdiskgb:,azdatadiskgb:,mem:,disk:,name:,netadmin:,mac:,dontrun,datavolume: -n "$0" -- $0 $@`
if [ $? != 0 ]; then
    show_usage
fi
eval set -- "${ARGS}"
while true
do
    case "$1" in
        --vmname) 
            VM_NAME=$2;
            shift 2
            ;;
        --azgroup)
            AZURE_GROUP=$2;
            shift 2
            ;;
        --azuresize)
            AZURE_SIZE=$2; #https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs
            shift 2
            ;;
        --azosdiskgb)
            AZURE_OS_DISK_GB=$2;
            shift 2
            ;;
        --azdatadiskgb)
            AZURE_DATA_DISK_GB=$2;
            shift 2
            ;;
        --azusessddisk)
            AZURE_USESSDDISK=true;
            shift
            ;;
          --azlocation)
            AZURE_LOC=$2; #https://azure.microsoft.com/en-us/global-infrastructure/locations
            shift 2
            ;;
	--azdnsname)
	    AZURE_DNSNAME=$2;
            shift 2
            ;;
	--azimage)
	    AZURE_OSNAME=$2;
            shift 2
            ;;
	--azsubnet)
	    AZURE_VNET_SUBNET=$2;
            shift 2
            ;;
        --cpu)
            VM_CPU_NUM=$2;
            shift 2
            ;;
        --mem)
            VM_MEM_SIZE=$2;
            shift 2
            ;;
        --disk)
            VM_DISK_SIZE=$2;
            shift 2
            ;;
        --name)
            DOCKER_CONTAINER_NAME=$2;
            shift 2
            ;;
        --netadmin)
            NETWORK_ADMIN=$2;
            shift 2
            ;;
        --mac)
            NETWORK_MAC=$2;
            shift 2
            ;;
        --dontrun)
            DOCKER_CREATE_BUT_DONT_RUN=yes
            shift
            ;;
        --datavolume)
            DATA_VOLUME=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
    esac
done

DOCKER_OS_PLATFORM=$1
DOCKER_IMAGE_FILE=$2
if [[ -z "$DOCKER_OS_PLATFORM" || -z "$DOCKER_IMAGE_FILE" ]]; then
    show_usage
fi
[ -z "$VM_NAME" ] && VM_NAME=$DOCKER_IMAGE_FILE
[ -z "$VM_CPU_NUM" ] && VM_CPU_NUM=4
[ -z "$VM_MEM_SIZE" ] && VM_MEM_SIZE=$[8*1024]
[ -z "$VM_DISK_SIZE" ] && VM_DISK_SIZE=$[40*1024]

NewInstallBin=""
WorkDir="/tmp/"`date|md5sum|grep -o "[0-9a-f]*"`
TmpIso=$WorkDir/iso
TmpFs=$WorkDir/fs
TmpTar=$TmpFs/tar

clear_env()
{
    ERRMSG=$1
    echo -e $ERRMSG
    [ "$DOCKER_OS_PLATFORM" == "azure" ] && az logout &>/dev/null
    clear_create_env
    [ -z "$ERRMSG" ] &&  exit 0 || exit 1
}

clear_create_env()
{
    ERRMSG=$1
    umount $TmpTar > /dev/null 2>&1
    umount $TmpIso > /dev/null 2>&1
    rm -rf $WorkDir > /dev/null 2>&1
    echo -e $ERRMSG
    [ -z "$ERRMSG" ] || exit 1
}

create_docker_image()
{
    #Step1: get fs.tar.gz
    MediaSuiteInstallFile=$1
    FilePath=$(readlink -f "$MediaSuiteInstallFile")
    [ -z "$FilePath" ] && echo "Cannot found $MediaSuiteInstallFile file" && exit 1
    clear_create_env
    mkdir -p $TmpIso $TmpTar $TmpFs
    FileExt="${MediaSuiteInstallFile##*.}"
    if [ $FileExt == "iso" ] ; then
        mount -r $MediaSuiteInstallFile $TmpIso && echo mount ISO success || clear_create_env "mount iso fail"
        BinFile=`find $TmpIso/released_version -name "MediaSuite*.bin"`
    elif [ $FileExt == "pkg" ] ; then
        tar zxf $MediaSuiteInstallFile -C $TmpIso && echo tar PKG success || clear_create_env "tar fail"
        BinFile=`find $TmpIso -name "MediaSuite*.bin"`
    elif [ $FileExt == "bin" ] ; then
        BinFile=$MediaSuiteInstallFile
    else
        show_usage
        clear_create_env "wrong file type"
    fi
    KSIZE=$(tail -n 99 $BinFile | grep "KernelSize:" | awk -F ' ' '{print $2}');
    mount -r -o loop,offset=${KSIZE} $BinFile $TmpTar && echo mount tar success || clear_create_env "mount loop fail"
    DockerImage=`echo $BinFile|grep -o "MediaSuite-[^-]*-[^-.]*"|tr '[A-Z]' '[a-z]'`
    DockerImageBase=${DockerImage}-base
    [ -z "`docker image ls|grep $DockerImageBase`" ] || docker image rm -f $DockerImageBase
    [ -z "`docker image ls|grep $DockerImage`" ] || docker image rm -f $DockerImage
    echo prepare patch docker 

    #Step2: patch docker
    cp -f $BinFile $TmpFs/
    cp -f $DEPLOY_SCRIPT_SELF $TmpFs/
    [ -f $DAEMON_SCRIPT ] && cp -f $DAEMON_SCRIPT $TmpFs/
    DOCKER_PATCH_FILE=00dockerpatch
    cat > $TmpFs/$DOCKER_PATCH_FILE <<\EOF
touch -f /.dockerenv
sed -i '/showip/d' /etc/inittab
sed -i "s/\(^::respawn:\)\(.*newlauncher.*\)/\1env MRM_SINGLE_PROCESS=yes MRM_NO_SHARED_MEMORY=yes \2/g" /etc/inittab
sed -i 's/pidof -x dhclient/pidof dhclient/g' /etc/sysconfig/network-scripts/ifdown-eth
sed -i '/^mount -a -v > \/mount.log 2>&1$/{
a\if [ ! -f /.dockerenv ]; then
a\    mount -a -v > /mount.log 2>&1
a\else
a\    # redefine poweroff
a\    mv /sbin/poweroff /sbin/poweroff.org
a\    cat > /sbin/poweroff <<\\EOF
a\#/bin/sh
a\ssh -p 8822 -o "StrictHostKeyChecking no" root@127.0.0.1 poweroff
a\EOF
a\    chmod +x /sbin/poweroff
a\    # redefine dmidecode due to cannt get valid serial number in docker
a\    if [[ ! -f /usr/sbin/dmidecode.org ]]; then
a\       mv /usr/sbin/dmidecode /usr/sbin/dmidecode.org
a\       cat > /usr/sbin/dmidecode <<\\EOF
a\#!/bin/sh
a\mac=`ip addr|grep ether|head -n 1|sed "s/ *link\\/ether \\([0-9a-f:]*\\).*/\\1/"`
a\md5=`echo $mac|md5sum`
a\echo "Serial Number: VMware-ff ff ${md5:0:2} ${md5:2:2} ${md5:4:2} ${md5:6:2} ${md5:8:2} ${md5:10:2}-${md5:12:2} ${md5:14:2} ${md5:16:2} ${md5:18:2} ${md5:20:2} ${md5:22:2} ${md5:24:2} ${md5:26:2}"
a\size=`free|grep Mem|sed "s/Mem: *\\([0-9]*\\).*/\\1/"`
a\echo "Size: $[($size/1024/1024+1)*1024] MB"
a\EOF
a\       chmod +x /usr/sbin/dmidecode
a\    fi
a\fi
d
}' /etc/init.d/rcS
sed -i '/\. \/etc\/udev\/udev\.conf/{
i\[ -f /.dockerenv ] && exit 0
}' /etc/rc.d/00udev
echo '#!/bin/sh
IFLIST="eth0 eth1"
for IF in $IFLIST; do
    ADDR=`ip -4 addr show dev $IF|grep inet|sed "s/.*inet \([^ ]*\).*/\1/g"`
    [ -z "$ADDR" ] && continue
    PREFIX=`ipcalc -p $ADDR|sed "s/PREFIX=//g"`
    IP=`echo $ADDR|sed "s/\([^\/]*\)\/.*/\1/g"`
    ID=20`echo $IF|sed "s/eth//g"`
    LeasesFile="/var/lib/dhclient/dhclient-$IF.leases"
    for GWIP in `pgrep -f $LeasesFile | grep routers $LeasesFile | sed "s/.*routers \([^;]*\);/\1/g"`; do
        GW=""
        [[ "`ipcalc -n ${IP}/${IPPREFIX}`" == "`ipcalc -n ${GWIP}/${IPPREFIX}`" ]] && GW=$GWIP && break
    done
    IfcfgFile="/etc/sysconfig/network-scripts/ifcfg-$IF"
    if [[ -z "$GW" && `grep "^BOOTPROTO=static" $IfcfgFile` ]]; then
        GW=`grep "GATEWAY=" $IfcfgFile|sed "s/GATEWAY=//g"`
    fi
    echo  "IP=$IP"  "NM=$NM" "GW=$GW"  "ID=$ID"
    [[ -z "$IP" || -z "$GW" || -z "$ID" ]] && break
    echo ip route append default via $GW dev $IF
    ip route append default via $GW dev $IF
    echo ip route replace default via $GW dev $IF src $IP table $ID
    ip route replace default via $GW dev $IF src $IP table $ID
    echo ip rule add from $IP table $ID
    ip rule add from $IP table $ID
done
' > /usr/polycom-msc/bin/set_route.sh
chmod +x /usr/polycom-msc/bin/set_route.sh
echo '#!/bin/sh
CONF=/etc/polycom-msc/sysconfig/resolv.conf
[ -f $CONF ] && cat $CONF > /etc/resolv.conf
SETROUTE=/usr/polycom-msc/bin/set_route.sh
[ -f $SETROUTE ] && $SETROUTE
' > /etc/dhcp/dhclient.d/mediasuite.sh
chmod +x /etc/dhcp/dhclient.d/mediasuite.sh
sed -i '/\$SSHD \$OPTIONS \&\& success/{
a\        if [ ! -f /.dockerenv ]; then
a\           $SSHD $OPTIONS && success || failure
a\        else
a\            chown -R root.root /var/empty
a\            ($SSHD $OPTIONS && pgrep -f "$SSHD") || ($SSHD -p 8822 $OPTIONS && pgrep -f "$SSHD") || failure
a\        fi
d
}' /etc/rc.d/52sshd
sed -i '/^\/usr\/polycom-msc\/bin\/set_network.sh$/{
a\if [[ "$NETWORK_ADMIN" != "host" && "$NETWORK_ADMIN" != "bridge" ]]; then
a\    cat /etc/polycom-msc/sysconfig/resolv.conf > /etc/resolv.conf
a\    ip addr flush eth0 &>/dev/null
a\    ip addr flush eth1 &>/dev/null
a\    /usr/polycom-msc/bin/set_network.sh
a\    /usr/polycom-msc/bin/set_route.sh
a\else
a\    set network
a\fi
a\IP=`ip -4 addr show dev eth0|grep inet|sed "s/.*inet \\([^/]*\\).*/\\1/g"`
a\SYS=`cat /etc/polycom-msc_config/rss_release_info|sed "s/CaptureServer\\(.*\\)/MediaSuite\\1/g"`
a\echo $SYS on $IP > /etc/issue
a\DOCKER_LOG=/var/dockerinstall/log/$LOGFILE.log
a\ln -sf $DOCKER_LOG /var/log/trace/install_package.log
a\echo -e "\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $DOCKER_LOG
a\echo -e "`date +"%Y-%m-%d %T"` Start $SYS on $IP \\n" | tee -a $DOCKER_LOG
d
}' /etc/rc.d/99rss
sed -i 's/\(^mount --bind \/var\/media \/var\/media\)/#\1/g' /etc/rc.d/99rss
sed -i 's/\(^mount -o remount,ro \/var\/media\)/#\1/g' /etc/rc.d/99rss
echo '#!/bin/sh
df | grep " /data$"
if [[ $? == 0 ]]; then
    [ -d /var/dockerinstall/log ] || mkdir -p /var/dockerinstall/log
    [ -d /var/dockerinstall/bin]  || mkdir -p /var/dockerinstall/bin
    #cp -f /usr/polycom-msc/bin/ms_docker_deploy /var/dockerinstall/bin/ms_docker_deploy
    #cp -f /usr/polycom-msc/bin/ms_docker_install_daemon /var/dockerinstall/bin/ms_docker_install_daemon
    if [ -n "$PORTABLE_VERSION" ]; then
        SYS_MISC=/etc/polycom-msc_config/sysconfig/sys_misc.conf
	sed -i "s/DiskSpaceCheckInterval=.*/DiskSpaceCheckInterval=31536000/g" $SYS_MISC
	sed -i "s/DiskWarnFiredInterval=.*/DiskWarnFiredInterval=31536000/g" $SYS_MISC
        SN=`/usr/sbin/dmidecode | grep "Serial Number" | sed "s/Serial Number: //g"`
        grep "SysSN=" $SYS_MISC || echo "SysSN=$SN" >> $SYS_MISC
    fi
    IMAGE=`ls -t1 /image/MediaSuite*.bin | head -1`
    if [ -f "$IMAGE" ]; then
        OLDPWD=`pwd` && cd /data
        CURR=`basename $IMAGE`
        [ ! -f /data/current ] && CURR=${CURR}.factory && mv $IMAGE /data/$CURR && ln -sf $CURR /data/current
        [ "`md5sum $IMAGE|awk '{print $1}'`" != "`md5sum /data/current|awk '{print $1}'`" ] && cp -f $IMAGE /data/current
        [ ! -f /data/factory ] && ln -sf $CURR /data/factory
        [ ! -f /data/fallback ] && ln -sf $CURR /data/fallback
        rm -rf /image
        cd $OLDPWD
    fi
    [ -d /data/config ] || mkdir -p /data/config
    mount --bind /data/config /config
    [ -d /data/output ] || mkdir -p /data/output
    mount --bind /data/output /output
    [ -d /data/database ] || mkdir -p /data/database
    mount --bind /data/database /database
    [ -d /data/dump ] || mkdir -p /data/dump
    mount --bind /data/dump /dump
fi' > /etc/rc.d/18DataVolume
chmod 777 /etc/rc.d/18DataVolume
sed -i 's/^\(resolverStr=resolverStr.."\)\(;"\)/\1 8.8.8.8\2/g' /usr/polycom-msc/bin/resolver_nginx.lua
echo '#!/bin/sh
[ ! -f /.dockerenv ] && exit 1
PKG_INSTALL_FILE=$1
[ -z "$PKG_INSTALL_FILE" ] && PKG_INSTALL_FILE=/data/$(basename `readlink /data/current`) 
INSTALL_PATH=/var/dockerinstall
CURRENT_VERSION=`readlink /data/current`
INSTALL_VERSION=`echo $PKG_INSTALL_FILE`
[ "$CURRENT_VERSION" = "$INSTALL_VERSION" ] && exit 1
DOCKER_LOG=/var/dockerinstall/log/$LOGFILE.log
echo -e "\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" | tee -a $DOCKER_LOG
echo -e "`date +"%Y-%m-%d %T"` Try to install $PKG_FILE\\n" | tee -a $DOCKER_LOG
rm -f $INSTALL_PATH/$INSTALL_FLAG_FILE
BIN_PATH=$INSTALL_PATH/$DOCKERNAME && mkdir -p $BIN_PATH
INSTALL_BIN=`basename $PKG_INSTALL_FILE|grep -o MediaSuite.*\.bin`
INSTALL_FLAG_FILE=InstallFlag+$DOCKERNAME+$LOGFILE+$INSTALL_BIN
cp -f $PKG_INSTALL_FILE $BIN_PATH/$INSTALL_BIN && touch ${INSTALL_PATH}/$INSTALL_FLAG_FILE && RET="success" || RET="fail"
echo "`date +"%Y-%m-%d %T"` Install package from $CURRENT_VERSION to $INSTALL_VERSION trigger $RET" | tee -a $DOCKER_LOG
[ "$RET" == "success" ] && exit 0 || exit 1
' > /usr/polycom-msc/bin/install-trigger.sh
chmod 777 /usr/polycom-msc/bin/install-trigger.sh
sed -i 's/\(current_run_fs=\).*$/\1current/g' /usr/polycom-msc/bin/install-package.sh
sed -i 's/^\([ \t]*\)\(mount[^(]*$\)/\1[ ! -f .dockerenv ] \&\& \2/g' /usr/polycom-msc/bin/install-package.sh
sed -i 's/^\([ \t]*\)\(umount[^(]*$\)/\1[ ! -f .dockerenv ] \&\& \2/g' /usr/polycom-msc/bin/install-package.sh
sed -i 's/\(exit 0;\)/\/usr\/polycom-msc\/bin\/install-trigger.sh; \1/g' /usr/polycom-msc/bin/install-package.sh
sed -i 's/^\(cd \$cur_path\)/\/usr\/polycom-msc\/bin\/install-trigger.sh; \1/g' /usr/polycom-msc/bin/install-package.sh
sed -i 's/\(current_run_fs=\).*$/\1current/g' /usr/polycom-msc/bin/fallback-package.sh
sed -i 's/^\([ \t]*\)\(mount[^(]*$\)/\1[ ! -f .dockerenv ] \&\& \2/g' /usr/polycom-msc/bin/fallback-package.sh
sed -i 's/^\([ \t]*\)\(umount[^(]*$\)/\1[ ! -f .dockerenv ] \&\& \2/g' /usr/polycom-msc/bin/fallback-package.sh
sed -i 's/^exit 0/\/usr\/polycom-msc\/bin\/install-trigger.sh/g' /usr/polycom-msc/bin/fallback-package.sh
sed -i '/\/bin\/bash/{
a\if [[ -f /.dockerenv ]]; then
a\    [ -d /var/log/upgrade ] || mkdir -p /var/log/upgrade
a\    touch /var/log/upgrade/SafeUpgradeVersions.txt
a\fi
}' /usr/polycom-msc/bin/read_whiteblacklist.sh
sed -i 's/exit 99/exit 2/g' /usr/polycom-msc/bin/chk_mongo_up.sh 
EOF
    echo "FROM scratch" > $TmpFs/Dockerfile
    echo "ADD  tar/fs.tar.gz /" >> $TmpFs/Dockerfile
    echo "COPY `basename $BinFile` /image/" >> $TmpFs/Dockerfile
    echo "COPY $DOCKER_PATCH_FILE /etc/rc.d/$DOCKER_PATCH_FILE" >> $TmpFs/Dockerfile
    echo "COPY `basename $DEPLOY_SCRIPT_SELF` /usr/polycom-msc/bin/`basename $DEPLOY_SCRIPT_SELF`" >> $TmpFs/Dockerfile 
    echo "COPY `basename $DAEMON_SCRIPT` /usr/polycom-msc/bin/`basename $DAEMON_SCRIPT`" >> $TmpFs/Dockerfile 
    echo "RUN sh /etc/rc.d/$DOCKER_PATCH_FILE; rm -f /etc/rc.d/$DOCKER_PATCH_FILE;" >> $TmpFs/Dockerfile
    docker build -t $DockerImage $TmpFs || clear_create_env "Create docker image $DockerImage failure!"
    echo "Create docker image $DockerImage success!"
    #clear_create_env
}

set_host_network()
{
    echo "netadmin=$1, try to set host network manager"
    if which nmcli &>/dev/null; then
        if [[ "$1" == "dhost" ]]; then
            nmcli networking off
        else
            nmcli networking on
        fi
    fi
}

try_get_docker_machine()
{
    which docker-machine && return 0
    base=https://github.com/docker/machine/releases/download/v0.16.2 && \
    curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && \
    mv /tmp/docker-machine /bin/docker-machine && \
    chmod +x /bin/docker-machine && \
    return 0 || return 1
}

import_run_docker()
{
    if [[ -f $DOCKER_IMAGE_FILE ]]; then
        echo "prepare import docker image..."
        DOCKER_IMAGE_NAME=`echo $DOCKER_IMAGE_FILE|grep -o "MediaSuite-[^-]*-[^-.]*"|tr '[A-Z]' '[a-z]'`
        [  -z ${DOCKER_IMAGE_NAME} ] && clear_env "docker install file or image name wrong"
        if [[ "`docker images --format "{{.Repository}}"`" =~ "$DOCKER_IMAGE_NAME" ]]; then
            echo "docker image $DOCKER_IMAGE_NAME already exist, don't create image"
        else
            create_docker_image $DOCKER_IMAGE_FILE || clear_env "create_docker_image failure"
        fi
    else
        DOCKER_IMAGE_NAME=$DOCKER_IMAGE_FILE
    fi
    DOCKER_IMAGE_NAME=`docker images --format "{{.Repository}}"|grep $DOCKER_IMAGE_NAME`
    if [ "`docker images --format "{{.Repository}}" $DOCKER_IMAGE_NAME`" != "$DOCKER_IMAGE_NAME" ]; then
        clear_env "Cannot found docker image: $DOCKER_IMAGE_NAME"
    fi

    echo "prepare create docker..."
    INSTALL_PATH=/var/dockerinstall
    if [ -z "$DOCKER_CONTAINER_NAME" ]; then
        while true; do
            DOCKER_CONTAINER_NAME=mediasuite-`openssl rand -hex 2`
            docker inspect --format='NewDocker={{.Name}}' $DOCKER_CONTAINER_NAME &>/dev/null || break
        done
    fi
    [ -z "$DATA_VOLUME" ] && DATA_VOLUME=$DOCKER_CONTAINER_NAME
    [ -d $INSTALL_PATH ] || mkdir -p $INSTALL_PATH
    DOCKER_RUN_OPT="--net=host -v /etc/resolv.conf:/etc/resolv.conf -v /etc/hostname:/etc/hostname -v /etc/issue:/etc/issue"
    [[ -f /.cloundenv && "$NETWORK_ADMIN" == "dhost" ]] && NETWORK_ADMIN=host
    [ "$NETWORK_ADMIN" == "macvlan" ] && docker network create -d macvlan -o parent=eth0 macvlan 2>/dev/null
    R=`openssl rand -hex 6` && MAC="66:${R:2:2}:${R:4:2}:${R:4:2}:${R:8:2}:${R:10:2}"
    [ -n "$NETWORK_MAC"] && MAC=$NETWORK_MAC
    [[ "$NETWORK_ADMIN" == "bridge" || "$NETWORK_ADMIN" == "dbridge" ]] && DOCKER_RUN_OPT="--mac-address=$MAC"
    [ "$NETWORK_ADMIN" == "macvlan" ] && DOCKER_RUN_OPT="--net=macvlan --mac-address=$MAC"
    [ -n "$NETWORK_ADMIN" ] && DOCKER_RUN_OPT+=" -e NETWORK_ADMIN=$NETWORK_ADMIN" || DOCKER_RUN_OPT+=" -e NETWORK_ADMIN=host"
    PIDFILE="/run/$DOCKER_CONTAINER_NAME.pid"
    docker --help |grep "podman system" && DOCKER_RUN_OPT+=" --conmon-pidfile=$PIDFILE --systemd=true" || DOCKER_RUN_OPT+=" --restart=unless-stopped"
    docker ps -a --format "{{.Names}}" | grep $DOCKER_CONTAINER_NAME || \
        docker create --privileged \
	             -it $DOCKER_RUN_OPT \
               -e LOGFILE=$DATA_VOLUME \
	       -e DOCKERNAME=$DOCKER_CONTAINER_NAME \
	             --name $DOCKER_CONTAINER_NAME \
               -v $DATA_VOLUME:/data \
               -v /root/.ssh:/root/.ssh \
               -v $INSTALL_PATH:$INSTALL_PATH \
	             $DOCKER_IMAGE_NAME \
	             /sbin/init || clear_env "docker create $DOCKER_IMAGE_NAME fail"
    set_host_network $NETWORK_ADMIN
    [ -z "$DOCKER_CREATE_BUT_DONT_RUN" ] || (echo "docker create success" && return 0)
    if docker --help |grep "podman system"; then
	MEDIASUITE_SERVICE="/etc/systemd/system/$DOCKER_CONTAINER_NAME.service" \
	    && echo "[Unit]" > $MEDIASUITE_SERVICE \
	    && echo "Description=Harman MediaSuite %n" >> $MEDIASUITE_SERVICE \
	    && echo "After=network.target" >> $MEDIASUITE_SERVICE \
	    && echo "[Service]" >> $MEDIASUITE_SERVICE \
	    && echo "Type=forking" >> $MEDIASUITE_SERVICE \
	    && echo "ExecStart=/usr/bin/docker start $DOCKER_CONTAINER_NAME" >> $MEDIASUITE_SERVICE \
	    && echo "ExecStop=/usr/bin/docker stop -t 0 $DOCKER_CONTAINER_NAME" >> $MEDIASUITE_SERVICE \
	    && echo "PIDFile=$PIDFILE" >> $MEDIASUITE_SERVICE \
	    && echo "KillMode=none" >> $MEDIASUITE_SERVICE \
	    && echo "Restart=always" >> $MEDIASUITE_SERVICE \
	    && echo "RestartSec=5s" >> $MEDIASUITE_SERVICE \
	    && echo "[Install]" >> $MEDIASUITE_SERVICE \
	    && echo "WantedBy=multi-user.target" >> $MEDIASUITE_SERVICE \
	    && systemctl enable $DOCKER_CONTAINER_NAME.service \
	    && systemctl start $DOCKER_CONTAINER_NAME.service \
		|| clear_env "docker run fail"
    else
	docker start $DOCKER_CONTAINER_NAME || clear_env "docker run fail"
    fi
    #[ "`ip link show dev eth0|grep -o eth0:`" == "eth0:" ] || (ln -s /dev/null /etc/systemd/network/99-default.link && reboot)
    echo "docker run success"
    return 0
}

case "$DOCKER_OS_PLATFORM" in
    linux)
	      DOCKER_IP=`ip addr show dev eth0| grep "inet "| sed 's/.*inet \([0-9.]*\).*/\1/g'|sed  's/\n//g'`
	      import_run_docker
	      ;;
    azure)
        if ! which az; then
            if which yum; then
                rpm --import https://packages.microsoft.com/keys/microsoft.asc
                cat > /etc/yum.repos.d/azure-cli.repo <<\EOF
[azure-cli]
name=Azure CLI  
baseurl=https://packages.microsoft.com/yumrepos/azure-cli
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc
EOF
                yum install -y azure-cli
	    elif which apt-get; then
		curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            fi
        fi
        [ -z "$AZURE_SIZE" ] && AZURE_SIZE="Standard_A8_v2"
	[ -z "$AZURE_OSNAME" ] && AZURE_IMAGE='--image Openlogic:CentOS:7.7:latest'
	[ "$AZURE_OSNAME" == "centos" ] && AZURE_IMAGE='--image Openlogic:CentOS:7.7:latest'
	[ "$AZURE_OSNAME" == "ubuntu" ] && AZURE_IMAGE='--image Canonical:UbuntuServer:18.04-LTS:latest'
	[ "$AZURE_OSNAME" == "coreos" ] && AZURE_IMAGE='--image CoreOS:CoreOS:Stable:latest'
	[ -z "$AZURE_IMAGE" ] && clear_env "Azure: image fail"
	    echo "prepare create docker machine..."
	    # create virtual machine (default config: "Standard_A8_v2", CPU 8/Mem 16G/Disk 80G,
	    # ref: https://docs.microsoft.com/en-us/azure/azure-stack/user/azure-stack-vm-sizes)
	az account show || (az login || clear_env "Azure: login fail")
	[ -z "$AZURE_GROUP" ] && AZURE_GROUP=mediasuite
	[[ -z "$AZURE_OS_DISK_GB" || $AZURE_OS_DISK_GB -lt 100 ]] && AZURE_OS_DISK_GB=100
	[ -z "$AZURE_DATA_DISK_GB" ] && AZURE_DATA_DISK_GB=100
	[ -z "$AZURE_LOC" ] && AZURE_LOC="eastus"
	[ -z "$AZURE_USER" ] && AZURE_USER="mediasuite"
	[ -z "$AZURE_PASSWD" ] && AZURE_PASSWD='1J$yZqk{8kgMxbw'
	[ -z "$AZURE_USESSDDISK" ] && CREATE_OPT+=" --storage-sku Standard_LRS" || CREATE_OPT+=" --storage-sku StandardSSD_LRS"
	[ -n "$AZURE_DNSNAME" ] && CREATE_OPT+=" --public-ip-address-dns-name $AZURE_DNSNAME"
        [ "`az group exists -n $AZURE_GROUP`" == "false" ] && (az group create --name $AZURE_GROUP --location $AZURE_LOC || clear_env "Azure: group fail")
	if [ -n "$AZURE_VNET_SUBNET" ]; then
	    AZURE_VNET_NAME=`echo $AZURE_VNET_SUBNET|awk -F '/' '{print $1}'`
	    AZURE_VNET_SUBNET=`echo $AZURE_VNET_SUBNET|awk -F '/' '{print $2}'`
	    [[ -z "$AZURE_VNET_NAME" || -z "AZURE_VNET_SUBNET" ]] && clear_env "Azure: parameter --azsubnet <vnet/subnet> format fail"
	    az network vnet show --resource-group $AZURE_GROUP --name $AZURE_VNET_NAME \
		|| az network vnet create --resource-group $AZURE_GROUP --name $AZURE_VNET_NAME --subnet-name $AZURE_VNET_SUBNET
	    CREATE_OPT+=" --vnet-name $AZURE_VNET_NAME --subnet $AZURE_VNET_SUBNET"
	fi
	CREATE_OPT+=" --public-ip-address-allocation static"
        az vm create --resource-group $AZURE_GROUP --name $VM_NAME $AZURE_IMAGE --size $AZURE_SIZE \
	   --os-disk-size-gb $AZURE_OS_DISK_GB --data-disk-sizes-gb $AZURE_DATA_DISK_GB \
	   --admin-username $AZURE_USER --generate-ssh-keys \
	   --public-ip-address-allocation static $CREATE_OPT \
            || clear_env "Azure: create VM $VM_NAME fail"
        az vm open-port -g $AZURE_GROUP -n $VM_NAME --port '*'
	echo "Azure VM $AZURE_IMAGE create success, try to configure..."
	DOCKER_IP=`az vm list-ip-addresses -g $AZURE_GROUP -n $VM_NAME|grep ipAddress|grep -o "[0-9.]*"` || clear_env "get docker ip fail"
	SSH_HOST=$AZURE_USER@$DOCKER_IP
	[ -f ~/.ssh/known_hosts ] && grep $DOCKER_IP ~/.ssh/known_hosts && rm -f ~/.ssh/known_hosts
        ssh -o "StrictHostKeyChecking no" $SSH_HOST "mkdir -p ~/dockerinstall/bin" || clear_env "Azure: touch /.cloundenv fail"
        scp $DEPLOY_SCRIPT_SELF $DAEMON_SCRIPT $SSH_HOST:~/dockerinstall/bin || clear_env "Azure: scp script fail"
        scp $DOCKER_IMAGE_FILE $SSH_HOST:~/dockerinstall/ || clear_env "Azure: scp file fail" 
        ssh $SSH_HOST "sudo touch /.cloundenv; sudo mv ~/dockerinstall /var/" || clear_env "Azure: mv file fail"
	ssh $SSH_HOST "sudo /var/dockerinstall/bin/ms_docker_install_daemon --confighost" || clear_env "Azure: confighost fail"
	echo "Reboot Azure VM $AZURE_IMAGE($DOCKER_IP) to start MediaSuite..."
	az vm user update -g $AZURE_GROUP -n $VM_NAME -u $AZURE_USER -p $AZURE_PASSWD > /dev/null || clear_env "Azure: update user fail"
	az vm restart -g $AZURE_GROUP -n $VM_NAME || clear_env "Azure: reboot fail"
	echo "Deploy MediaSuite success on Azure VM $AZURE_IMAGE($DOCKER_IP)"
	;;
    virtualbox)
	      echo "prepare create docker machine..."
        try_get_docker_machine || clear_env "no install docker-machine"
	      docker-machine create -d virtualbox  \
		                   --virtualbox-cpu-count "$VM_CPU_NUM" \
		                   --virtualbox-memory "$VM_MEM_SIZE" \
		                   --virtualbox-disk-size "$VM_DISK_SIZE" \
		                   $VM_NAME || clear_env "docker-machine create fail"
	      echo "docker-machine create success"
	      DOCKER_ENV=`docker-machine env $VM_NAME` || clear_env "docker-machine env fail"
	      eval $DOCKER_ENV
	      DOCKER_IP=`docker-machine ip $VM_NAME` || clear_env "get docker ip fail"
	      import_run_docker
	      ;;
    hyperv)
	      echo "prepare create docker machine..."
        try_get_docker_machine || clear_env "no install docker-machine"
	      docker-machine create -d hyperv  \
		                   --hyperv-cpu-count "$VM_CPU_NUM" \
		                   --hyperv-memory "$VM_MEM_SIZE" \
		                   --hyperv-disk-size "#VM_DISK_SIZE" \
		                   $VM_NAME || clear_env "docker-machine create fail"
	      echo "docker-machine create success"
	      DOCKER_ENV=`docker-machine env $VM_NAME` || clear_env "docker-machine env fail"
	      eval $DOCKER_ENV
	      DOCKER_IP=`docker-machine ip $VM_NAME` || clear_env "get docker ip fail"
	      import_run_docker
	      ;;
    *)
	      show_usage
	      ;;
esac

echo -e "$DOCKER_OS_PLATFORM MediaSuite done, please use below IP addressin browser to login:\n$DOCKER_IP"
clear_env
